

#include "imports/stdlib.fc";

global slice arbiter;
global slice beneficiary;

() load_data () impure {
  slice ds = get_data().begin_parse();
  arbiter = ds~load_msg_addr();
  beneficiary = ds~load_msg_addr();
}

() authorize (sender) inline {
  throw_unless(187, equal_slice_bits(sender, arbiter));
}

() recv_internal (in_msg_full, in_msg_body) {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();
    authorize(sender_address);
    
    var message = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(beneficiary)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice("Hello, beneficiary!")
        .end_cell();

    send_raw_message(message, 64);
    
}

(slice) get_arbiter() method_id {
load_data();
return arbiter;
}

(slice) get_beneficiary() method_id {
load_data();
return beneficiary;
}